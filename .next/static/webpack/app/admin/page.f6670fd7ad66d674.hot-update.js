"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/lib/adminCourseService.ts":
/*!***************************************!*\
  !*** ./src/lib/adminCourseService.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminCourseService: () => (/* binding */ AdminCourseService)\n/* harmony export */ });\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(app-pages-browser)/./src/lib/supabaseClient.ts\");\n/* harmony import */ var _adminAuth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./adminAuth */ \"(app-pages-browser)/./src/lib/adminAuth.ts\");\n\n\nclass AdminCourseService {\n    /**\n   * Obtiene todos los cursos (admin)\n   */ static async getAllCourses(userId) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { data, error } = await supabase.from('courses').select(\"\\n          *,\\n          categories (\\n            name,\\n            slug\\n          ),\\n          profiles (\\n            full_name,\\n            email\\n          )\\n        \").order('created_at', {\n                ascending: false\n            });\n            if (error) throw error;\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error('Error fetching courses:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al obtener cursos'\n            };\n        }\n    }\n    /**\n   * Crea un nuevo curso\n   */ static async createCourse(userId, courseData) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            // Sanitizar campos opcionales: convertir \"\" a null y asegurar tipos\n            const payload = {\n                ...courseData,\n                instructor_id: userId,\n                is_published: courseData.is_published || false,\n                rating: 0,\n                students_count: 0\n            };\n            if (!courseData.category_id) payload.category_id = null;\n            if (!courseData.image_url) payload.image_url = null;\n            if (!courseData.video_preview_url) payload.video_preview_url = null;\n            if (!courseData.duration) payload.duration = null;\n            // Asegurar número en price\n            payload.price = Number.isFinite(courseData.price) ? courseData.price : 0;\n            const { data, error } = await supabase.from('courses').insert(payload).select().single();\n            if (error) throw error;\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error('Error creating course:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al crear curso'\n            };\n        }\n    }\n    /**\n   * Actualiza un curso\n   */ static async updateCourse(userId, courseId, courseData) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            // Sanitizar: convertir strings vacíos a null para columnas UUID/URL/text opcionales\n            const patch = {\n                ...courseData\n            };\n            if (patch.category_id === '') patch.category_id = null;\n            if (patch.image_url === '') patch.image_url = null;\n            if (patch.video_preview_url === '') patch.video_preview_url = null;\n            if (patch.duration === '') patch.duration = null;\n            if (typeof patch.price !== 'undefined') patch.price = Number(patch.price) || 0;\n            const { data, error } = await supabase.from('courses').update(patch).eq('id', courseId).select().single();\n            if (error) throw error;\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error('Error updating course:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al actualizar curso'\n            };\n        }\n    }\n    /**\n   * Elimina un curso\n   */ static async deleteCourse(userId, courseId) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { error } = await supabase.from('courses').delete().eq('id', courseId);\n            if (error) throw error;\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error deleting course:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al eliminar curso'\n            };\n        }\n    }\n    /**\n   * Obtiene las lecciones de un curso\n   */ static async getCourseLessons(userId, courseId) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { data, error } = await supabase.from('lessons').select('*').eq('course_id', courseId).order('order_index', {\n                ascending: true\n            });\n            if (error) throw error;\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error('Error fetching lessons:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al obtener lecciones'\n            };\n        }\n    }\n    /**\n   * Crea una nueva lección\n   */ static async createLesson(userId, lessonData) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { data, error } = await supabase.from('lessons').insert({\n                ...lessonData,\n                is_free: lessonData.is_free || false\n            }).select().single();\n            if (error) throw error;\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error('Error creating lesson:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al crear lección'\n            };\n        }\n    }\n    /**\n   * Actualiza una lección\n   */ static async updateLesson(userId, lessonId, lessonData) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { data, error } = await supabase.from('lessons').update(lessonData).eq('id', lessonId).select().single();\n            if (error) throw error;\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            console.error('Error updating lesson:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al actualizar lección'\n            };\n        }\n    }\n    /**\n   * Elimina una lección\n   */ static async deleteLesson(userId, lessonId) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { error } = await supabase.from('lessons').delete().eq('id', lessonId);\n            if (error) throw error;\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error deleting lesson:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al eliminar lección'\n            };\n        }\n    }\n    /**\n   * Obtiene todas las categorías\n   */ static async getCategories(userId) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { data, error } = await supabase.from('categories').select('*').order('name', {\n                ascending: true\n            });\n            if (error) throw error;\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error fetching categories:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al obtener categorías'\n            };\n        }\n    }\n    /**\n   * Publica/despublica un curso\n   */ static async toggleCoursePublication(userId, courseId, isPublished) {\n        try {\n            const adminCheck = await _adminAuth__WEBPACK_IMPORTED_MODULE_1__.AdminAuthService.requireAdmin(userId);\n            if (!adminCheck.isAdmin) {\n                return {\n                    success: false,\n                    error: adminCheck.error\n                };\n            }\n            const supabase = (0,_lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.createClientSupabaseClient)();\n            const { error } = await supabase.from('courses').update({\n                is_published: isPublished\n            }).eq('id', courseId);\n            if (error) throw error;\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('Error toggling course publication:', error);\n            return {\n                success: false,\n                error: error.message || 'Error al cambiar estado de publicación'\n            };\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/adminCourseService.ts\n"));

/***/ })

});