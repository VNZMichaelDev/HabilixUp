// Script para diagnosticar el problema de admin y cursos
// Ejecutar con: node diagnose-admin-issue.js

const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://jbvjvzryjpcewwublpjh.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impidmp2enJ5anBjZXd3dWJscGpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5OTc2NDAsImV4cCI6MjA3MzU3MzY0MH0.C9r9aHUWkU0-Gkh2q3ecLYZ5pSiy0CaGJ2y9h8Dh9Kg'

const supabase = createClient(supabaseUrl, supabaseKey)

async function diagnoseAdminIssue() {
  console.log('üîç DIAGN√ìSTICO COMPLETO DE PROBLEMAS DE ADMIN\n')

  try {
    // 1. Verificar acceso b√°sico a profiles
    console.log('1Ô∏è‚É£ Probando acceso b√°sico a la tabla profiles...')
    const { data: allProfiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email, role, full_name')
      .limit(5)

    if (profilesError) {
      console.error('‚ùå Error accediendo a profiles:', profilesError.message)
      console.log('   C√≥digo:', profilesError.code)
      console.log('   Detalles:', profilesError.details)
    } else {
      console.log('‚úÖ Acceso a profiles exitoso:', allProfiles?.length || 0, 'perfiles encontrados')
      allProfiles?.forEach(profile => {
        console.log(`   üë§ ${profile.email} - Rol: ${profile.role || 'sin rol'}`)
      })
    }

    // 2. Buscar espec√≠ficamente el perfil admin
    console.log('\n2Ô∏è‚É£ Buscando perfil de maikermicha15@gmail.com...')
    const { data: adminProfile, error: adminError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', 'maikermicha15@gmail.com')
      .single()

    if (adminError) {
      console.error('‚ùå Error buscando perfil admin:', adminError.message)
      if (adminError.code === 'PGRST116') {
        console.log('   üîç El perfil no existe o no es accesible')
      }
    } else {
      console.log('‚úÖ Perfil admin encontrado:')
      console.log('   üìß Email:', adminProfile.email)
      console.log('   üîë Rol:', adminProfile.role)
      console.log('   üë§ Nombre:', adminProfile.full_name)
      console.log('   üÜî ID:', adminProfile.id)
      console.log('   üìÖ Creado:', adminProfile.created_at)
    }

    // 3. Probar acceso a cursos
    console.log('\n3Ô∏è‚É£ Probando acceso a la tabla courses...')
    const { data: courses, error: coursesError } = await supabase
      .from('courses')
      .select('id, title, instructor_id, is_published')
      .limit(5)

    if (coursesError) {
      console.error('‚ùå Error accediendo a courses:', coursesError.message)
      console.log('   C√≥digo:', coursesError.code)
      console.log('   Detalles:', coursesError.details)
    } else {
      console.log('‚úÖ Acceso a courses exitoso:', courses?.length || 0, 'cursos encontrados')
      courses?.forEach(course => {
        console.log(`   üìö ${course.title} - Publicado: ${course.is_published}`)
      })
    }

    // 4. Probar acceso a lecciones
    console.log('\n4Ô∏è‚É£ Probando acceso a la tabla lessons...')
    const { data: lessons, error: lessonsError } = await supabase
      .from('lessons')
      .select('id, title, course_id')
      .limit(3)

    if (lessonsError) {
      console.error('‚ùå Error accediendo a lessons:', lessonsError.message)
      console.log('   C√≥digo:', lessonsError.code)
      console.log('   Detalles:', lessonsError.details)
    } else {
      console.log('‚úÖ Acceso a lessons exitoso:', lessons?.length || 0, 'lecciones encontradas')
    }

    // 5. Verificar pol√≠ticas RLS
    console.log('\n5Ô∏è‚É£ Verificando estado de RLS...')
    const { data: rlsStatus, error: rlsError } = await supabase
      .rpc('check_rls_status')
      .select()

    if (rlsError) {
      console.log('‚ö†Ô∏è  No se pudo verificar RLS autom√°ticamente')
    }

    // 6. Intentar una operaci√≥n de inserci√≥n simple
    console.log('\n6Ô∏è‚É£ Probando inserci√≥n en categories (deber√≠a funcionar)...')
    const { data: newCategory, error: insertError } = await supabase
      .from('categories')
      .insert({
        name: 'Categor√≠a de Prueba - ' + Date.now(),
        slug: 'categoria-prueba-' + Date.now(),
        description: 'Categor√≠a temporal para pruebas'
      })
      .select()
      .single()

    if (insertError) {
      console.error('‚ùå Error insertando categor√≠a:', insertError.message)
      console.log('   C√≥digo:', insertError.code)
    } else {
      console.log('‚úÖ Inserci√≥n exitosa en categories')
      
      // Limpiar - eliminar la categor√≠a de prueba
      await supabase
        .from('categories')
        .delete()
        .eq('id', newCategory.id)
      console.log('üßπ Categor√≠a de prueba eliminada')
    }

    console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO:')
    console.log('- Si hay errores de RLS, las pol√≠ticas est√°n muy restrictivas')
    console.log('- Si no se encuentra el perfil admin, hay que crearlo/actualizarlo')
    console.log('- Si no se muestran cursos, las pol√≠ticas de courses est√°n bloqueando')
    
    console.log('\nüí° RECOMENDACI√ìN:')
    console.log('Ejecuta fix-rls-simple.sql para pol√≠ticas m√°s permisivas')

  } catch (error) {
    console.error('‚ùå Error general en diagn√≥stico:', error.message)
  }
}

diagnoseAdminIssue()
